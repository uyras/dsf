#include "squarespinicecell.h"


SquareSpinIceCell::SquareSpinIceCell()
    :types
{
{//#1
{1,0,0,0},
{0,-1,0,0},
{-1,0,0,0},
{0,1,0,0}
         },
{//#2
{-1,0,0,1},
{0,1,0,1},
{-1,0,0,1},
{0,1,0,1}
         },
{//#3
{1,0,0,1},
{0,1,0,1},
{1,0,0,1},
{0,1,0,1}
         },
{//#4
{-1,0,0,2},
{0,-1,0,2},
{-1,0,0,2},
{0,1,0,2}
         },
{//#5
{-1,0,0,2},
{0,-1,0,2},
{1,0,0,2},
{0,-1,0,2}
         },
{//#6
{-1,0,0,2},
{0,1,0,2},
{-1,0,0,2},
{0,-1,0,2}
         },
{//#7
{1,0,0,2},
{0,-1,0,2},
{-1,0,0,2},
{0,-1,0,2}
         },
{//#8
{-1,0,0,3},
{0,-1,0,3},
{1,0,0,3},
{0,1,0,3}
         },
         //дальше предыдущие конфиги, умноженные на -1
{//#9
{-1,0,0,0},
{0,1,0,0},
{1,0,0,0},
{0,-1,0,0}
         },
{//#10
{1,0,0,1},
{0,-1,0,1},
{1,0,0,1},
{0,-1,0,1}
         },
{//#11
{-1,0,0,1},
{0,-1,0,1},
{-1,0,0,1},
{0,-1,0,1}
         },
{//#12
{1,0,0,2},
{0,1,0,2},
{1,0,0,2},
{0,-1,0,2}
         },
{//#13
{1,0,0,2},
{0,1,0,2},
{-1,0,0,2},
{0,1,0,2}
         },
{//#14
{1,0,0,2},
{0,-1,0,2},
{1,0,0,2},
{0,1,0,2}
         },
{//#15
{-1,0,0,2},
{0,1,0,2},
{1,0,0,2},
{0,1,0,2}
         },
{//#16
{1,0,0,3},
{0,1,0,3},
{-1,0,0,3},
{0,-1,0,3}
         }
         }
{
}

SquareSpinIceCell::~SquareSpinIceCell()
{
}

int SquareSpinIceCell::type()
{
    for (int i=0;i<16;i++){
        if (
                this->top->m.scalar(Vect(types[i][0][0],types[i][0][1],types[i][0][2]))>=0 &&
                this->right->m.scalar(Vect(types[i][1][0],types[i][1][1],types[i][1][2]))>=0 &&
                this->bottom->m.scalar(Vect(types[i][2][0],types[i][2][1],types[i][2][2]))>=0 &&
                this->left->m.scalar(Vect(types[i][3][0],types[i][3][1],types[i][3][2]))>=0
                ) {
            return types[i][0][3];
        }
    }
    return -1;
}
